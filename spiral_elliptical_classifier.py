# -*- coding: utf-8 -*-
"""Spiral_Elliptical_Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dszgyNkTuTM-lLtwenGDQ-aHOM3M5Pnj

# $\color{magenta}{\text{Spiral Elliptical Classifier}}$

### $\color{yellow}{\text{Modules First!}}$
"""

import torch

"""#### **Installing the Required Modules**"""

!pip install -Uqq fastbook
!pip install astropy

"""#### **Importing the Required Modules**"""

from fastbook import *
from astropy.io import fits
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
import os
import time

"""### $\color{yellow}{\text{Getting the Data}}$

#### **Extracting Coordinates from the Catalogue Dataset**
"""

Galaxies_dat_hud=fits.open('drive/MyDrive/Spiral_Elliptical_Classifier/Spiral_Elliptical_Catalogue.fits')

Galaxies_dat=Galaxies_dat_hud[1].data

Spiral_ones=Galaxies_dat['SPIRAL']
Elliptical_ones=Galaxies_dat['ELLIPTICAL']
Uncertain_ones=Galaxies_dat['UNCERTAIN']

Spiral_dat=Galaxies_dat[Spiral_ones==1]
Elliptical_dat=Galaxies_dat[Elliptical_ones==1]
Uncertain_dat=Galaxies_dat[Uncertain_ones==1]

Spiral_ras = Spiral_dat['RA']
Spiral_decs = Spiral_dat['DEC']
Elliptical_ras = Elliptical_dat['RA']
Elliptical_decs = Elliptical_dat['DEC']
Uncertain_ras = Uncertain_dat['RA']
Uncertain_decs = Uncertain_dat['DEC']

Spiral_ras[0], Spiral_decs[0]

"""#### **Getting URLs from the Coordinates**"""

def get_image_urls(ras, decs, width, height):
    urls=[]
    for ra,dec in zip(ras,decs):
        urls.append(f'http://skyserver.sdss.org/dr16/SkyServerWS/ImgCutout/getjpeg?ra={ra}&dec={dec}&width={width}&height={height}&scale=0.1&.jpg')
    return urls

Spurls=get_image_urls(ras=Spiral_ras, decs=Spiral_decs, width=512, height=512)
Ellurls=get_image_urls(ras=Elliptical_ras, decs=Elliptical_decs, width=512, height=512)
Unurls=get_image_urls(ras=Uncertain_ras, decs=Uncertain_decs, width=512, height=512)
len(Spurls), len(Ellurls), len(Unurls)

"""#### **Creating Folders to store the Image Data**"""

#Only at the start
#Already done
os.mkdir('drive/MyDrive/Spiral_Elliptical_Classifier/Data_20')
os.mkdir('drive/MyDrive/Spiral_Elliptical_Classifier/Data_20/Spiral')
os.mkdir('drive/MyDrive/Spiral_Elliptical_Classifier/Data_20/Elliptical')
os.mkdir('drive/MyDrive/Spiral_Elliptical_Classifier/Data_20/Uncertain')

"""#### **Downloading the Image data from the URLs**"""

#Already done
time1=time.perf_counter()
download_images('drive/MyDrive/Spiral_Elliptical_Classifier/Data_20/Elliptical',urls=Ellurls[0:20000])
download_images('drive/MyDrive/Spiral_Elliptical_Classifier/Data_20/Spiral',urls=Spurls[0:20000])
download_images('drive/MyDrive/Spiral_Elliptical_Classifier/Data_20/Uncertain',urls=Unurls[0:20000])
time2=time.perf_counter()
print(time2-time1)

download_images('',urls=Ellurls[0:2])

"""### $\color{yellow}{\text{Classifier in Making}}$

#### **Creating Dataloaders**
"""

datblk = DataBlock(
    blocks=(ImageBlock, CategoryBlock), 
    get_items=get_image_files, 
    splitter=TrainTestSplitter(test_size=0.2, random_state=42, shuffle=True),
    get_y=parent_label,
    item_tfms=Resize(512),
    batch_tfms=aug_transforms())

datlds=datblk.dataloaders('drive/MyDrive/Spiral_Elliptical_Classifier/Data')

datlds.valid.show_batch(max_n=4, nrows=1)

"""#### **Learning in Progress**"""

Spiral_Elliptical_Classifier = cnn_learner(datlds, resnet34, metrics=accuracy)

lr=Spiral_Elliptical_Classifier.lr_find()

Spiral_Elliptical_Classifier.recorder.train_metrics=True

Spiral_Elliptical_Classifier.fine_tune(5, lr[0], cbs=EarlyStoppingCallback(patience=7))

torch.cuda.empty_cache()

"""#### **Interpretation**"""

interp = ClassificationInterpretation.from_learner(Spiral_Elliptical_Classifier)
interp.plot_confusion_matrix()

"""#### **Predict**"""

!mkdir drive/MyDrive/Spiral_Elliptical_Classifier/Test

for i in range(4):  
  download_url(Ellurls[45000+i*7],f'drive/MyDrive/Spiral_Elliptical_Classifier/Test/test{i+12}.jpg')
  print(Spiral_Elliptical_Classifier.predict('drive/MyDrive/Spiral_Elliptical_Classifier/Test/test{}.jpg'.format(i+4)))

"""### $\color{yellow}{\text{Export and Import}}$

#### **Exporting**
"""

Spiral_Elliptical_Classifier.export('/content/drive/MyDrive/Spiral_Elliptical_Classifier/Spiral_Elliptical_Classifier_34.pkl')

"""#### **Loading**"""

Spiral_Elliptical_Classifier=load_learner('/content/drive/MyDrive/Spiral_Elliptical_Classifier/Spiral_Elliptical_Classifier_34.pkl')

"""### $\color{yellow}{\text{Feature Extraction}}$

#### **Turning Images to Tensors and Stacking them to get a 4 dim Tensor**
"""

#Stacks of Image Tensors with indexex shifted to match the model layers
num=8
imgs=[]
for i in range(4,num+4):
  img=Image.open('drive/MyDrive/Spiral_Elliptical_Classifier/Test/test{}.jpg'.format(i))
  img=img.resize((128,128))
  img = np.array(img, dtype=np.float32)
  img = np.einsum('ijk->kij', img)
  img=tensor(img)
  imgs.append(img)

imgs=torch.stack(imgs)
imgs.shape

"""#### **Structure**"""

#Part of the Structure useful for getting features 
Spiral_Elliptical_Classifier.model[0]

#Doesn't play much part
Spiral_Elliptical_Classifier.model[1]

"""#### **Visualizing Outputs of each Layers**"""

#creates a directory
!mkdir vis

#Plots and saves outputs from each requested layer
def vis_layers(lower_layer, upper_layer):  
  for layer in range(lower_layer+1,upper_layer):
    #outputs from layers beneath it
    output=Spiral_Elliptical_Classifier.model[0][:layer](imgs)
    
    #Size of the multi-plot
    size=output.shape[1]
    num1=2**(int(math.log(size,2)/2))
    num2=2**(int(math.log(size,2) - int(math.log(size,2)/2)))
    
    #Creates sites for multiple plots
    fig=plt.figure(figsize=(num1,num2))
    ax = [fig.add_subplot(num2,num1,i+1) for i in range(num1*num2)]
    
    #Plots them
    for j in range(num1*num2):
      #detach is used detach the grad from the tensor and cpu is to convert the tensor from cuda to cpu operable
      img=output[6][j].cpu().detach().numpy()
      ax[j].imshow(img)
      ax[j].axis('off')
    
    #Spacing adjusts
    fig.subplots_adjust(wspace=0.01, hspace=0.03)

    #Saves them, tight is used to closely pack the plots together
    fig.savefig(f'layer_{layer}.jpg',bbox_inches='tight', pad_inches=0.03)
    plt.show()

vis_layers(0,9)

"""#### **Filter Visualisation**"""

flatten_model(Spiral_Elliptical_Classifier.model)[56]

plt.imshow(list(Spiral_Elliptical_Classifier.model.parameters())[0][0][0].detach())

"""### $\color{yellow}{\text{Useful}}$

#### **Mounting the Drive to Colab**
"""

from google.colab import drive
drive.mount('/content/drive')

"""####**To delete Non Empty Files**

``` %rm -rf star ```




"""

# Commented out IPython magic to ensure Python compatibility.
# %rm -rf drive/MyDrive/Spiral_Elliptical_Classifier/Data

"""#### **To Export the Images**

``` import shutil ```

```shutil.make_archive('test', 'zip', '.')```



"""

import shutil

shutil.make_archive('.', 'zip', 'test')

"""#### **Getting the Parameters in each and every layer**"""

#Returns Parameters(Weights) in each and every layer even through ReLU and BatchNorm too
list(Spiral_Elliptical_Classifier.model.parameters())[0].shape

"""#### **Action of Each Layers on the Tensor Stacks (Images)**"""

#Returns Output from each and every layer even through ReLU and BatchNorm too
flatten_model(Spiral_Elliptical_Classifier.model)[90]

#Requires 4 dim stacks of image tensor with same channel [-,3,-,-] and returns us the Output 
output=flatten_model(Spiral_Elliptical_Classifier.model)[0](imgs)

output.shape